
// dummy mock class represents an Actor
class Actor
{
    // c-tor
    def Actor()
    {
        this.saidHello = False;
        this.rotating = False;

        this.lookAroundCounter = 0;
        this.lookAroundLimiter = 5;
        this.stoppedCounter = 0;
        this.rotateCounter = 0;
    }

    // methods
    def sayHello()
    {
        print("Hello!\n");
        this.saidHello = True;
    }

    def canLookAround()
    {
        if(this.lookAroundCounter >= this.lookAroundLimiter)
        {
            return False;
        }

        ++this.lookAroundCounter;
        return True;
    }

    def isStopped()
    {
        ++this.stoppedCounter;

        if(this.stoppedCounter % 3 == 0) // 2/3 of checks will fail
        {
            return True;
        }
        return False;
    }

    def stop()
    {
        print("Stop.");
    }

    def isStillRotating()
    {
        if(this.rotating == False)
        {
            return False;
        }

        ++this.rotateCounter;

        if(this.rotateCounter % 5 == 0) // 4/5 of checks will confirm that actor is rotating
        {
            return False;
        }
        return True;
    }

    def rotate(degrees)
    {
        if(this.rotating == True)
        {
            return;
        }
        this.rotating = True;
        print("I'll turn ${degrees} degrees!\n");
    }

    // class' data
    var saidHello;
    var rotating;

    var lookAroundCounter;
    var lookAroundLimiter;
    var stoppedCounter;
    var rotateCounter;
}


global hero = Actor();

BT.AddSelector(); // root

BT.AddSequence(); // sayHello
BT.AddSequence(); // lookAround

// set active node: first (zero-based indexing) child of root:
BT.SetAtAbsolutely(0);

BT.AddInvert();

// go to first child of invert decorator node:
BT.SetAtRelatively(0);

// saidHello condition node:
BT.AddCondition(fun()
               {
                   return hero.saidHello;
               });

// get back to the 'sayHello' sequence:
BT.SetAtAbsolutely(0);

// add say "Hello" action node:
BT.AddAction(fun()
            {
                hero.sayHello();
                return StateSuccess;
            });

// set as active 'lookAround' sequence:
BT.SetAtAbsolutely(1);

// canLookAround condition node:
BT.AddCondition(fun()
               {
                   return hero.canLookAround();
               });

// Stop action node:
BT.AddAction(fun()
            {
                if(hero.isStopped() == True)
                {
                    return StateSuccess;
                }
                hero.stop();
                return StateRunning;
            });

// Rotate360 action:
BT.AddAction(fun()
            {
                hero.rotate(360);
                if(hero.isStillRotating() == True)
                {
                    return StateRunning;
                }
                return StateSuccess;
            });
